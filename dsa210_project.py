# -*- coding: utf-8 -*-
"""DSA210_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oyywq-TnlfEKfDzc4DKmbIy7uayCT8-j
"""

import pandas as pd

months = ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran",
          "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"]
years = [2019, 2020, 2021, 2022, 2023, 2024]

# Aylık doluluk oranları
monthly_doluluk = {
    2019: [80.2, 81.4, 82.1, 82.6, 83.0, 83.4, 84.0, 83.7, 82.5, 81.9, 80.8, 80.0],
    2020: [79.5, 78.0, 65.2, 25.3, 30.1, 40.0, 55.6, 58.2, 60.4, 63.1, 64.2, 65.1],
    2021: [66.3, 67.1, 67.4, 67.8, 68.2, 68.5, 69.0, 70.1, 71.0, 72.2, 72.5, 73.0],
    2022: [78.0, 79.0, 80.5, 81.0, 81.6, 82.2, 83.1, 83.5, 83.0, 82.4, 81.3, 80.8],
    2023: [81.1, 81.5, 82.2, 82.7, 83.3, 84.1, 85.0, 84.8, 83.7, 83.1, 82.4, 81.9],
    2024: [82.0, 82.5, 83.0, 83.3, 83.7, 84.0, 85.2, 85.4, 84.3, 83.6, 82.9, 82.1]
}

# Aylık yolcu sayıları (milyon cinsinden)
monthly_passengers = {
    2019: [6.2, 6.4, 6.6, 6.7, 6.8, 6.9, 7.1, 7.0, 6.8, 6.5, 6.3, 6.0],
    2020: [5.5, 5.2, 1.2, 0.4, 0.6, 1.0, 1.5, 1.7, 1.9, 2.1, 2.3, 2.5],
    2021: [2.8, 3.2, 3.6, 4.0, 4.3, 4.6, 5.1, 5.5, 5.8, 6.0, 6.2, 6.4],
    2022: [6.6, 6.8, 7.0, 7.2, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1],
    2023: [8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2],
    2024: [9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4]
}

# Yaz tatili (Haziran, Temmuz, Ağustos = 1)
yaz_tatil_matrisi = {
    year: [1 if i in [5, 6, 7] else 0 for i in range(12)] for year in years
}

# Tatil gün sayısı
tatil_gunleri_dogru = {
    2019: [1, 0, 0, 2, 3, 4, 0, 1, 0, 2, 1, 1],
    2020: [1, 0, 0, 2, 4, 3, 1, 2, 1, 1, 1, 1],
    2021: [1, 0, 0, 1, 4, 5, 0, 1, 0, 2, 1, 1],
    2022: [1, 0, 0, 2, 3, 5, 0, 1, 0, 2, 1, 1],
    2023: [1, 0, 0, 2, 4, 4, 0, 1, 0, 2, 1, 1],
    2024: [1, 0, 0, 1, 4, 5, 0, 1, 0, 2, 1, 1]
}

# Enflasyon ve yakıt
enflasyon = {
    2019: [1.06, 0.16, 1.03, 1.69, 0.95, 0.03, 1.36, 0.86, 0.99, 2.00, 0.38, 0.74],
    2020: [1.35, 0.35, 0.57, 0.85, 1.36, 1.13, 0.58, 0.86, 0.97, 2.13, 2.30, 1.25],
    2021: [1.68, 0.91, 1.08, 1.68, 0.89, 1.94, 1.80, 1.12, 1.25, 2.39, 3.51, 13.58],
    2022: [11.10, 4.81, 5.46, 7.25, 2.98, 4.95, 2.37, 1.46, 3.08, 3.54, 2.88, 1.18],
    2023: [6.65, 3.15, 2.29, 2.39, 0.04, 3.92, 9.49, 9.09, 4.75, 3.43, 3.28, 2.93],
    2024: [6.70, 4.53, 3.16, 3.18, 3.37, 1.64, 1.36, 1.46, 4.75, 3.43, 3.28, 2.93]
}

yakıt = {
    2019: [1.15, 1.12, 1.10, 1.08, 1.09, 1.11, 1.13, 1.14, 1.16, 1.18, 1.20, 1.22],
    2020: [1.23, 1.25, 1.20, 1.10, 1.05, 1.08, 1.12, 1.15, 1.17, 1.19, 1.21, 1.24],
    2021: [1.26, 1.28, 1.30, 1.32, 1.34, 1.36, 1.38, 1.40, 1.42, 1.44, 1.46, 1.48],
    2022: [1.50, 1.52, 1.54, 1.56, 1.58, 1.60, 1.62, 1.64, 1.66, 1.68, 1.70, 1.72],
    2023: [1.74, 1.76, 1.78, 1.80, 1.82, 1.84, 1.86, 1.88, 1.90, 1.92, 1.94, 1.96],
    2024: [1.98, 2.00, 2.02, 2.04, 2.06, 2.08, 2.10, 2.12, 2.14, 2.16, 2.18, 2.20]
}

# Aylık COVID-19 vaka sayıları (bin kişi olarak varsayılmıştır)
covid_vaka = {
    2019: [0]*12,
    2020: [0, 0, 3, 65, 145, 120, 95, 80, 70, 60, 50, 45],
    2021: [40, 60, 95, 100, 110, 85, 70, 65, 75, 90, 120, 140],
    2022: [180, 160, 140, 100, 85, 60, 40, 30, 20, 15, 10, 5],
    2023: [5, 5, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1],
    2024: [0]*12
}

# Tüm verileri birleştir
data = {
    "Yıl": [], "Ay": [], "Tarih": [], "Doluluk Oranı (%)": [],
    "Yolcu Sayısı (Milyon)": [], "Yaz Tatili mi? (1=Evet)": [],
    "Tatil Gün Sayısı": [], "Enflasyon (%)": [], "Yakıt Fiyatı (USD/Litre)": [],
    "COVID Vaka Sayısı (Bin)": []
}

for year in years:
    for i, month in enumerate(months):
        data["Yıl"].append(year)
        data["Ay"].append(month)
        data["Tarih"].append(pd.to_datetime(f"{year}-{i+1}-01"))
        data["Doluluk Oranı (%)"].append(monthly_doluluk[year][i])
        data["Yolcu Sayısı (Milyon)"].append(monthly_passengers[year][i])
        data["Yaz Tatili mi? (1=Evet)"].append(yaz_tatil_matrisi[year][i])
        data["Tatil Gün Sayısı"].append(tatil_gunleri_dogru[year][i])
        data["Enflasyon (%)"].append(enflasyon[year][i])
        data["Yakıt Fiyatı (USD/Litre)"].append(yakıt[year][i])
        data["COVID Vaka Sayısı (Bin)"].append(covid_vaka[year][i])

df = pd.DataFrame(data)

# Kontrol için ilk 5 satır
print(df.head())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Ay sıralaması için
df["Ay"] = pd.Categorical(df["Ay"], categories=[
    "Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran",
    "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"
], ordered=True)

sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (12, 6)

# 1. Doluluk Oranı Zaman Serisi (Yıllar ve Aylara Göre)
plt.figure()
sns.lineplot(data=df, x="Ay", y="Doluluk Oranı (%)", hue="Yıl", marker="o")
plt.title("Aylık Doluluk Oranı Zaman Serisi (2019–2024)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 2. Yolcu Sayısı Zaman Serisi
plt.figure()
sns.lineplot(data=df, x="Tarih", y="Yolcu Sayısı (Milyon)", hue="Yıl", palette="tab10")
plt.title("Zaman İçinde Yolcu Sayısı (Milyon)")
plt.tight_layout()
plt.show()

# 3. Doluluk Oranı ve Yaz Tatili İlişkisi
plt.figure()
sns.boxplot(data=df, x="Yaz Tatili mi? (1=Evet)", y="Doluluk Oranı (%)")
plt.xticks([0, 1], ["Hayır", "Evet"])
plt.title("Yaz Tatilinde Doluluk Oranı Dağılımı")
plt.tight_layout()
plt.show()

# 4. Doluluk Oranı vs Enflasyon
plt.figure()
sns.scatterplot(data=df, x="Enflasyon (%)", y="Doluluk Oranı (%)", hue="Yıl", palette="coolwarm", s=70)
sns.regplot(data=df, x="Enflasyon (%)", y="Doluluk Oranı (%)", scatter=False, color="black")
plt.title("Doluluk Oranı vs Enflasyon")
plt.tight_layout()
plt.show()

# 5. Doluluk Oranı vs Yakıt Fiyatı
plt.figure()
sns.scatterplot(data=df, x="Yakıt Fiyatı (USD/Litre)", y="Doluluk Oranı (%)", hue="Yıl", palette="viridis", s=70)
sns.regplot(data=df, x="Yakıt Fiyatı (USD/Litre)", y="Doluluk Oranı (%)", scatter=False, color="black")
plt.title("Doluluk Oranı vs Yakıt Fiyatı")
plt.tight_layout()
plt.show()

# 6. Aylık Ortalama Yolcu Sayısı
plt.figure()
sns.boxplot(data=df, x="Ay", y="Yolcu Sayısı (Milyon)")
plt.title("Aylık Yolcu Sayısı Dağılımı")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 7. Korelasyon Isı Haritası (COVID dahil)
plt.figure(figsize=(10, 6))
corr = df[["Doluluk Oranı (%)", "Yolcu Sayısı (Milyon)", "Enflasyon (%)",
           "Yakıt Fiyatı (USD/Litre)", "Tatil Gün Sayısı", "COVID Vaka Sayısı (Bin)"]].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Değişkenler Arası Korelasyon Matrisi (COVID Dahil)")
plt.tight_layout()
plt.show()

# --- YENİ: COVID ile ilişkili analizler ---

# 8. COVID Vaka Sayısı Zaman Serisi
plt.figure()
sns.lineplot(data=df, x="Tarih", y="COVID Vaka Sayısı (Bin)", hue="Yıl", palette="rocket", marker="o")
plt.title("Zaman İçinde Aylık COVID Vaka Sayısı (Bin)")
plt.tight_layout()
plt.show()

# 9. COVID Vaka Sayısı vs Doluluk Oranı
plt.figure()
sns.scatterplot(data=df, x="COVID Vaka Sayısı (Bin)", y="Doluluk Oranı (%)", hue="Yıl", palette="mako", s=70)
sns.regplot(data=df, x="COVID Vaka Sayısı (Bin)", y="Doluluk Oranı (%)", scatter=False, color="black")
plt.title("COVID Vaka Sayısı vs Doluluk Oranı")
plt.tight_layout()
plt.show()

# 10. COVID Vaka Sayısı vs Yolcu Sayısı
plt.figure()
sns.scatterplot(data=df, x="COVID Vaka Sayısı (Bin)", y="Yolcu Sayısı (Milyon)", hue="Yıl", palette="crest", s=70)
sns.regplot(data=df, x="COVID Vaka Sayısı (Bin)", y="Yolcu Sayısı (Milyon)", scatter=False, color="black")
plt.title("COVID Vaka Sayısı vs Yolcu Sayısı")
plt.tight_layout()
plt.show()

from scipy.stats import ttest_ind

# COVID öncesi (2019)
pre_covid = df[df["Yıl"] == 2019]
# COVID dönemi (2020 ve 2021)
during_covid = df[df["Yıl"].isin([2020, 2021])]

# 1. Doluluk Oranı karşılaştırması
t_stat1, p_val1 = ttest_ind(pre_covid["Doluluk Oranı (%)"], during_covid["Doluluk Oranı (%)"], alternative="greater")

print("🧪 Hipotez Testi 1: Doluluk Oranı")
print(f"T-istatistiği: {t_stat1:.3f}, P-değeri: {p_val1:.3f}")
if p_val1 < 0.05:
    print("🔴 H₀ reddedildi: COVID döneminde doluluk oranı anlamlı şekilde DÜŞÜK.")
else:
    print("🟢 H₀ reddedilemedi: COVID etkisi anlamlı değil gibi görünüyor.")

# 2. Yolcu Sayısı karşılaştırması
t_stat2, p_val2 = ttest_ind(pre_covid["Yolcu Sayısı (Milyon)"], during_covid["Yolcu Sayısı (Milyon)"], alternative="greater")

print("\n🧪 Hipotez Testi 2: Yolcu Sayısı")
print(f"T-istatistiği: {t_stat2:.3f}, P-değeri: {p_val2:.3f}")
if p_val2 < 0.05:
    print("🔴 H₀ reddedildi: COVID döneminde yolcu sayısı anlamlı şekilde AZ.")
else:
    print("🟢 H₀ reddedilemedi: Yolcu sayısında anlamlı fark yok gibi.")

import pandas as pd
from scipy.stats import ttest_ind, pearsonr

# Yaz tatili grupları
tatil_var = df[df["Yaz Tatili mi? (1=Evet)"] == 1]
tatil_yok = df[df["Yaz Tatili mi? (1=Evet)"] == 0]

# Tatil günü sayısı grupları: 0–1 az, 2+ çok
df["Tatil Günü Grubu"] = df["Tatil Gün Sayısı"].apply(lambda x: "Az" if x <= 1 else "Fazla")
tatil_az = df[df["Tatil Günü Grubu"] == "Az"]
tatil_fazla = df[df["Tatil Günü Grubu"] == "Fazla"]

# Pre ve Post grupları
pre_covid = df[df["Yıl"] == 2019]
post_covid = df[df["Yıl"].isin([2022, 2023, 2024])]

### T-TESTLER ###
def ttest_print(grup1, grup2, degisken, label1, label2):
    tstat, pval = ttest_ind(grup1[degisken], grup2[degisken])
    print(f"\n🧪 {degisken} için {label1} vs {label2}")
    print(f"T-istatistiği = {tstat:.3f}, P-değeri = {pval:.4f}")
    if pval < 0.05:
        print("🔴 Anlamlı fark VAR.")
    else:
        print("🟢 Anlamlı fark YOK.")

# 1: Yakıt Fiyatı (Pre vs Post)
ttest_print(pre_covid, post_covid, "Yakıt Fiyatı (USD/Litre)", "Pre", "Post")

# 2: Enflasyon (Pre vs Post)
ttest_print(pre_covid, post_covid, "Enflasyon (%)", "Pre", "Post")

# 3: Doluluk Oranı (Yaz tatili var mı)
ttest_print(tatil_var, tatil_yok, "Doluluk Oranı (%)", "Tatil Var", "Tatil Yok")

# 4: Yolcu Sayısı (Tatil günü az vs çok)
ttest_print(tatil_az, tatil_fazla, "Yolcu Sayısı (Milyon)", "Tatil Az", "Tatil Fazla")


### KORELASYONLAR ###
def corr_print(x, y, label_x, label_y):
    r, p = pearsonr(df[x], df[y])
    print(f"\n📈 Pearson Korelasyonu: {label_x} ↔ {label_y}")
    print(f"r = {r:.3f}, p = {p:.4f}")
    if p < 0.05:
        print("🔴 Anlamlı korelasyon VAR.")
    else:
        print("🟢 Anlamlı korelasyon YOK.")

# A: Yakıt vs Enflasyon
corr_print("Yakıt Fiyatı (USD/Litre)", "Enflasyon (%)", "Yakıt", "Enflasyon")

# B: Enflasyon vs Doluluk
corr_print("Enflasyon (%)", "Doluluk Oranı (%)", "Enflasyon", "Doluluk")

# C: Yakıt vs Doluluk
corr_print("Yakıt Fiyatı (USD/Litre)", "Doluluk Oranı (%)", "Yakıt", "Doluluk")